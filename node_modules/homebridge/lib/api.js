"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const version_1 = __importDefault(require("./version"));
const hapNodeJs = __importStar(require("hap-nodejs"));
const _1 = require("./");
const pluginManager_1 = require("./pluginManager");
const log = _1.Logger.internal;
class HomebridgeAPI extends events_1.EventEmitter {
    // ------------------------------------------------------------------------
    constructor() {
        super();
        this.version = 2.5; // homebridge API version
        this.serverVersion = version_1.default(); // homebridge node module version
        // ------------------ LEGACY EXPORTS FOR PRE TYPESCRIPT  ------------------
        this.user = _1.User;
        this.hap = hapNodeJs;
        this.hapLegacyTypes = hapNodeJs.LegacyTypes; // used for older accessories/platforms
        this.platformAccessory = _1.PlatformAccessory;
    }
    static isDynamicPlatformPlugin(platformPlugin) {
        return "configureAccessory" in platformPlugin;
    }
    static isStaticPlatformPlugin(platformPlugin) {
        return "accessories" in platformPlugin;
    }
    signalFinished() {
        this.emit("didFinishLaunching" /* DID_FINISH_LAUNCHING */);
    }
    signalShutdown() {
        this.emit("shutdown" /* SHUTDOWN */);
    }
    registerAccessory(pluginIdentifier, accessoryName, constructor) {
        if (typeof accessoryName === "function") {
            constructor = accessoryName;
            accessoryName = pluginIdentifier;
            this.emit("registerAccessory" /* REGISTER_ACCESSORY */, accessoryName, constructor);
        }
        else {
            this.emit("registerAccessory" /* REGISTER_ACCESSORY */, accessoryName, constructor, pluginIdentifier);
        }
    }
    registerPlatform(pluginIdentifier, platformName, constructor) {
        if (typeof platformName === "function") {
            constructor = platformName;
            platformName = pluginIdentifier;
            this.emit("registerPlatform" /* REGISTER_PLATFORM */, platformName, constructor);
        }
        else {
            this.emit("registerPlatform" /* REGISTER_PLATFORM */, platformName, constructor, pluginIdentifier);
        }
    }
    publishCameraAccessories(pluginIdentifier, accessories) {
        this.publishExternalAccessories(pluginIdentifier, accessories);
    }
    publishExternalAccessories(pluginIdentifier, accessories) {
        if (!pluginManager_1.PluginManager.isQualifiedPluginIdentifier(pluginIdentifier)) {
            log.info(`One of your plugins incorrectly registered an external accessory using the platform name (${pluginIdentifier}) and not the plugin identifier. Please report this to the developer!`);
        }
        accessories.forEach(accessory => {
            // noinspection SuspiciousTypeOfGuard
            if (!(accessory instanceof _1.PlatformAccessory)) {
                throw new Error(`${pluginIdentifier} attempt to register an accessory that isn't PlatformAccessory!`);
            }
            accessory._associatedPlugin = pluginIdentifier;
        });
        this.emit("publishExternalAccessories" /* PUBLISH_EXTERNAL_ACCESSORIES */, accessories);
    }
    registerPlatformAccessories(pluginIdentifier, platformName, accessories) {
        accessories.forEach(accessory => {
            // noinspection SuspiciousTypeOfGuard
            if (!(accessory instanceof _1.PlatformAccessory)) {
                throw new Error(`${pluginIdentifier} - ${platformName} attempt to register an accessory that isn't PlatformAccessory!`);
            }
            accessory._associatedPlugin = pluginIdentifier;
            accessory._associatedPlatform = platformName;
        });
        this.emit("registerPlatformAccessories" /* REGISTER_PLATFORM_ACCESSORIES */, accessories);
    }
    updatePlatformAccessories(accessories) {
        this.emit("updatePlatformAccessories" /* UPDATE_PLATFORM_ACCESSORIES */, accessories);
    }
    unregisterPlatformAccessories(pluginIdentifier, platformName, accessories) {
        accessories.forEach(accessory => {
            // noinspection SuspiciousTypeOfGuard
            if (!(accessory instanceof _1.PlatformAccessory)) {
                throw new Error(`${pluginIdentifier} - ${platformName} attempt to unregister an accessory that isn't PlatformAccessory!`);
            }
        });
        this.emit("unregisterPlatformAccessories" /* UNREGISTER_PLATFORM_ACCESSORIES */, accessories);
    }
}
exports.HomebridgeAPI = HomebridgeAPI;
//# sourceMappingURL=api.js.map